#! /usr/bin/python3
from telebot.async_telebot import AsyncTeleBot as telebot
from vgltu_api import fetcher
import os, asyncio, json, datetime
import secrets

bot = telebot(secrets.telegram_token)

async def send_schedule(chat_id, value, json_data):
	group, day_sent = value
	schedule = await data_fetcher.get_schedule(group) #time, lesson, tutor, location
	message = "\n\n".join([f"""{lesson['time']}
{lesson['lesson']}
{lesson['tutor']}
{lesson['location']}""" for lesson in schedule])
	await bot.send_message(chat_id, message)

async def timer():
	while True:
		if os.path.exists("subscribers.json"):
			with open("subscribers.json", "r") as f:
				json_data = json.load(f)
		else:
			json_data = {}

		tasks = []
		for chat_id, value in json_data.items():
			if value[1]!=datetime.datetime.now().day:
				tasks.append(send_schedule(chat_id, value, json_data))
				json_data[chat_id][1] = datetime.datetime.now().day
		changed_json = len(tasks)>0
		await asyncio.gather(*tasks)
		print(changed_json)
		if changed_json:
			with open("subscribers.json", "w") as f:
				f.write(json.dumps(json_data))
		await asyncio.sleep(60*5)
	return

@bot.message_handler(commands = ["start", "unsubscribe", "subscribe"])
async def command_handler(message):
	command = message.text.split(" ")[0].replace("/", "", 1)
	command = globals()[command] #Dont hack me please!
	await command(message)

async def unsubscribe(message):
	with open("subscribers.json", "r") as f:
		json_data = json.load(f)
	if str(message.chat.id) not in json_data:
		await bot.reply_to(message, "–î–∞–∫ —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –≥–µ–Ω–∏–π...")
		return
	del json_data[str(message.chat.id)]
	with open("subscribers.json", "w") as f:
		json.dump(json_data, f)
	await bot.reply_to(message, "–ù—É –∏ –∏–¥–∏ –Ω–∞—Ñ–∏–≥! üñï")


async def subscribe(message):
	group = message.text.replace("/subscribe ", "", 1)
	all_groups = await data_fetcher.get_groups()
	if group not in all_groups:
		await bot.reply_to(message, "–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã. –ü–∏—à–∏—Ç–µ –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.")
		return
	if os.path.exists("subscribers.json"):
		with open("subscribers.json", "r") as f:
			json_data = json.loads(f.read())
	else:
		json_data = {}
	if str(message.chat.id) in json_data:
		await bot.reply_to(message, "–¢–∞–∫ —Ç—ã —É–∂–µ –Ω–∞ —á—ë—Ç –ø–æ–¥–ø–∏—Å–∞–Ω. –û—Ç–ø–∏—à–∏—Å—å —Å–Ω–∞—á–∞–ª–∞ /unsubscribe")
		return
	json_data[str(message.chat.id)] = (group, datetime.datetime.now().day)
	with open("subscribers.json", "w") as f:
		f.write(json.dumps(json_data))
	await bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –º–µ–Ω—è ü•µ. –ö–æ–≥–¥–∞ —Ç–µ–±—è –æ—Ç—á–∏—Å–ª—è—Ç –Ω–∞–ø–∏—à–∏ /unsubscribe, –æ–∫–µ–π?")

async def start(message):
	await bot.reply_to(message, """VGLTU-Schedule - —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–∞–π—Ç–∞ –∏ –æ—Ç—Å—ã–ª–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –≤–∞–º –≤ –ø–æ–ª–Ω–æ—á—å.
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ /subscribe <–í–ê–®–ê –ì–†–£–ü–ü–ê>. –ü–∏—à–∏—Ç–µ –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.

VGLTU-Schedule  Copyright (C) 2024  Fun_Dan3
–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ê–ë–°–û–õ–Æ–¢–ù–û –ù–ò–ö–ê–ö–ò–• –ì–ê–†–ê–ù–¢–ò–ô.
–õ–∏—Ü–µ–Ω–∑–∏—è: https://raw.githubusercontent.com/FunDan3/VGLTU-Schedule/refs/heads/main/LICENSE.

–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @fun_dan3.
""")

async def start_bot():
	global data_fetcher
	data_fetcher = fetcher()
	try:
		await asyncio.gather(bot.polling(), timer())
	except KeyboardInterrupt:
		await data_fetcher.close()
	except asyncio.exceptions.CancelledError:
		await data_fetcher.close()

asyncio.run(start_bot())

