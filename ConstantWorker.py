#! /usr/bin/python3
from telebot.async_telebot import AsyncTeleBot as telebot
import telebot as telegramlib
from vgltu_api import get_schedule, get_groups
import os, asyncio, json, datetime
import secrets

bot = telebot(secrets.telegram_token)
lock = False

async def waitlock():
	iter = 0
	while lock:
		iter +=1
		await asyncio.sleep(1)
		if iter >= 15:
			print("Lock took too long to open, forcing it open")
			break
async def send_schedule(chat_id, value, json_data, schedule_cache):
	print(f"Sending to {chat_id}")
	group, day_sent, errored_out, subgroup = value
	if group not in schedule_cache:
		print(f"Fetching {group}")
		schedule_cache[group] = get_schedule(group) #time, lesson, tutor, location
	schedules = schedule_cache[group]
	today = datetime.datetime.now()
	tomorrow = datetime.datetime.now() + datetime.timedelta(days = 1)

	if subgroup: #nesting ew
		for schedule in schedules:
			to_remove = []
			for lesson in schedule:
				if lesson['lesson'].endswith(" –ø–≥. ") and not lesson['lesson'].endswith(f"{subgroup} –ø–≥. "):
					to_remove.append(lesson)
			for removed_element in to_remove:
				schedule.remove(removed_element)

	tomorrow_message = "\n\n".join([f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.day}.{tomorrow.month}.{tomorrow.year}):"]+[f"""{lesson['time']}
{lesson['lesson']}
{lesson['tutor']}
{lesson['location']}""" for lesson in schedules[1]])
	today_message = "\n\n".join([f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.day}.{today.month}.{today.year}):"]+[f"""{lesson['time']}
{lesson['lesson']}
{lesson['tutor']}
{lesson['location']}""" for lesson in schedules[0]])
	await bot.send_message(chat_id, tomorrow_message)
	await bot.send_message(chat_id, today_message)
	print(f"Sent to {chat_id}")

async def timer():
	global lock
	schedule_cache = {}
	pday = datetime.datetime.now().day
	while True:
		if pday!=datetime.datetime.now().day:
			schedule_cache = {}
			pday = datetime.datetime.now().day
		await waitlock(); lock=True
		if os.path.exists("subscribers.json"):
			with open("subscribers.json", "r") as f:
				json_data = json.load(f)
		else:
			json_data = {}

		changed_json = False
		to_remove = []
		for chat_id, value in json_data.items():
			if value[1]!=datetime.datetime.now().day:
				try:
					await send_schedule(chat_id, value, json_data, schedule_cache)
					json_data[chat_id][1] = datetime.datetime.now().day
					json_data[chat_id][2] = False #Errored out
					changed_json = True
					await asyncio.sleep(1)
				except Exception as e:
					print(f"{e}: {chat_id}: {value}")
					if not json_data[chat_id][2]:
						json_data[chat_id][2] = True #Errored out
						changed_json = True
						try:
							await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ï—Å–ª–∏ –≤—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±—Å–∞–π—Ç—É —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ @fundan3\n"+str(e))
						except telegramlib.asyncio_helper.ApiTelegramException as e:
							if "403" in str(e):
								to_remove.append(chat_id)
							else:
								raise e
		for chat_id in to_remove:
			del json_data[chat_id]
		if changed_json:
			with open("subscribers.json", "w") as f:
				f.write(json.dumps(json_data))
		lock = False
		await asyncio.sleep(60*5) #TODO CHANGE BACK
	return

@bot.message_handler(commands = ["start", "unsubscribe", "subscribe", "stats", "setsubgroup"])
async def command_handler(message):
	command = message.text.split(" ")[0].replace("/", "", 1)
	command = globals()[command] #Dont hack me please!
	await command(message)

async def setsubgroup(message):
	global lock
	await waitlock(); lock = True
	if os.path.exists("subscribers.json"):
		with open("subscribers.json", "r") as f:
			json_data = json.load(f)
	else:
		json_data = {}
	if message.chat.id not in json_data:
		await bot.reply_to(message, "–ü–æ–¥–ø–∏—à–∏—Å—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —á—Ç–æ–ª—å...")
		lock = False
		return
	if message.text not in ["/setsubgroup 1", "/setsubgroup 2"]:
		await bot.reply_to(message, "–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã.")
		lock = False
		return
	json_data[str(message.chat.id)][3] = 1 if message.text.endswith("1") else 2
	with open("subscribers.json", "w") as f:
		json.dump(json_data, f)
	lock = False
	await bot.reply_to(message, f"–¢–µ–ø–µ—Ä—å —Ç—ã –≤ {1 if message.text.endswith('1') else 2} –ø–æ–¥–≥—Ä—É–ø–ø–µ")

async def stats(message):
	if os.path.exists("subscribers.json"):
		with open("subscribers.json", "r") as f:
			json_data = json.load(f)
	else:
		json_data = {}
	await bot.reply_to(message, f"Bot has {len(json_data.keys())} subscribers")

async def unsubscribe(message):
	global lock
	await waitlock(); lock = True
	with open("subscribers.json", "r") as f:
		json_data = json.load(f)
	if str(message.chat.id) not in json_data:
		await bot.reply_to(message, "–î–∞–∫ —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –≥–µ–Ω–∏–π...")
		lock = False
		return
	del json_data[str(message.chat.id)]
	with open("subscribers.json", "w") as f:
		json.dump(json_data, f)
	lock = False
	await bot.reply_to(message, "–ù—É –∏ –∏–¥–∏ –Ω–∞—Ñ–∏–≥! üñï")


async def subscribe(message):
	global lock
	group = message.text.replace("/subscribe ", "", 1)
	all_groups = get_groups()
	if group not in all_groups:
		await bot.reply_to(message, "–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã. –ü–∏—à–∏—Ç–µ –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.")
		return
	await waitlock(); lock = True
	if os.path.exists("subscribers.json"):
		with open("subscribers.json", "r") as f:
			json_data = json.loads(f.read())
	else:
		json_data = {}
	if str(message.chat.id) in json_data:
		await bot.reply_to(message, "–¢–∞–∫ —Ç—ã —É–∂–µ –Ω–∞ —á—ë—Ç –ø–æ–¥–ø–∏—Å–∞–Ω. –û—Ç–ø–∏—à–∏—Å—å —Å–Ω–∞—á–∞–ª–∞ /unsubscribe")
		lock = False
		return
	json_data[str(message.chat.id)] = (group, -1, False, False)
	with open("subscribers.json", "w") as f:
		f.write(json.dumps(json_data))
	await bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –º–µ–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç.\n–¢—ã –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /setsubgroup (—Ç—É—Ç 1 –∏–ª–∏ 2).\n–ö–æ–≥–¥–∞ —Ç–µ–±—è –æ—Ç—á–∏—Å–ª—è—Ç –Ω–∞–ø–∏—à–∏ /unsubscribe, –æ–∫–µ–π?")
	lock = False

async def start(message):
	await bot.reply_to(message, """VGLTU-Schedule - —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–∞–π—Ç–∞ –∏ –æ—Ç—Å—ã–ª–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –≤–∞–º –≤ —á–∞—Å –Ω–æ—á–∏.
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ /subscribe –í–ê–®–ê_–ì–†–£–ü–ü–ê. –ü–∏—à–∏—Ç–µ –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã.

VGLTU-Schedule  Copyright (C) 2024  Fun_Dan3
–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ê–ë–°–û–õ–Æ–¢–ù–û –ù–ò–ö–ê–ö–ò–• –ì–ê–†–ê–ù–¢–ò–ô.
–õ–∏—Ü–µ–Ω–∑–∏—è: https://raw.githubusercontent.com/FunDan3/VGLTU-Schedule/refs/heads/main/LICENSE.

–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @fun_dan3.
–≠—Ç–æ –±–µ—Ç–∞ –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞, –Ω–µ –Ω–∞–¥–µ–π—Ç–µ—Å—å –Ω–∞ –º–Ω–æ–≥–æ–µ
""")

async def start_bot():
	try:
		await asyncio.gather(bot.infinity_polling(), timer())
	except Exception as e:
		print(f"Closing due to {e}")
		await bot.close()
asyncio.run(start_bot())

